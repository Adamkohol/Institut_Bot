import logging
import asyncio
import emoji
from emoji import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import BotBlocked
from aiogram import Bot, executor, types
from aiogram.dispatcher import Dispatcher
from os import getenv
from sys import exit
from utils import BotStates
import json
import nltk
import numpy
import random
import bot as nav
import tensorflow
import tflearn
import pickle
import tg_analytic
from nltk.stem.lancaster import LancasterStemmer
from Responses import chat
import redis

password = getenv("PASS_TOKEN_KEY")
bot_token = getenv("BOT_TOKEN")
if not bot_token:
    exit("Error: no token provided")

bot = Bot(token=bot_token)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

AUTHORIZATION_STATE = False
print("PROGRAM START")


# EXCEPTION FOR BLOCK---------------------------------------------------------------------------------------------------
@dp.message_handler(commands="block")
async def cmd_block(message: types.Message):
    await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")


@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True
# EXCEPTION FOR BLOCK---------------------------------------------------------------------------------------------------

'''def is_emoji(s):
    count = 0
    for em in UNICODE_EMOJI_ENGLISH:
        count += s.count(em)
        if count > 1:
            return False
        return bool(count)
'''


def text_has_emoji(text):
    for character in text:
        if character in emoji.UNICODE_EMOJI_ENGLISH:
            return True
    return False



async def BUTTON(message: types.Message):
    if message.text == 'üõ† –ü–æ–º–æ—â—å':  # –∫–Ω–æ–ø–æ—á–∫–∏, —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ message  –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
        await message.reply("help  is working")
    elif message.text == '‚Åâ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        await faqOut(message)
    elif message.text == 'üß© –¢–µ—Å—Ç—ã':
        await testcheckOut(message)
    elif message.text == 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏':
        await remlesOut(message)
    elif message.text == 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ':
        await remdeadOut(message)
    elif message.text == 'üéì –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å':
        await eduresOut(message)
    elif message.text == 'üìöÔ∏è –£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª':
        await edumatOut(message)
    elif message.text == 'üèÜ –¢–æ–ø':
        await congstuOut(message)
    elif message.text == '–î—Ä—É–≥–æ–µ ‚û°':
        await message.reply("–î—Ä—É–≥–æ–µ ‚û°", reply_markup=nav.otherMenu)
    elif message.text == '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.reply("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)

# –í–û–ó–ú–û–ñ–ù–û –õ–£–ß–®–ï –í–´–ù–ï–°–¢–ò –ö–ù–û–ü–ö–ò –í –§–ê–ô–õ –ò –û–¢–¢–£–î–ê –ò–ú–ü–û–†–¢–ò–¢–¨ –ï–°–õ–ò –≠–¢–û –í–û–ó–ú–û–ñ–ù–û
async def StudBUTTON(message: types.Message):
    if message.text == 'üõ† –ü–æ–º–æ—â—å':  # –∫–Ω–æ–ø–æ—á–∫–∏, —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ message  –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
        await message.reply("help  is working")
    elif message.text == '‚Åâ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        await faqOut(message)
    elif message.text == 'üß© –¢–µ—Å—Ç—ã':
        await testcheckOut(message)
    elif message.text == 'üìöÔ∏è –£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª':
        await edumatOut(message)
    elif message.text == '–î—Ä—É–≥–æ–µ ‚û°':
        await message.reply("–î—Ä—É–≥–æ–µ ‚û°", reply_markup=nav.otherMenu)
    elif message.text == '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.reply("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)

     # async def helpOut(message):
     #     await message.reply("help  is working")
     #
     #
     # async def faqOut(message):
     #     await message.reply("faq is working")
     #
     #
     # async def remlesOut(message):
     #     await message.reply("remind lesson is working")
     #
     #
     # async def remdeadOut(message):
     #     await message.reply("remind deadline is working")
     #
     #
     # async def testcheckOut(message):
     #     await message.reply("test is working:")
     #
     #
     # async def eduresOut(message):
     #     await message.reply("education result is working")
     #
     #
     # async def edumatOut(message):
     #     await message.reply("education material is working")
     #
     #
     # async def congstuOut(message):
     #     await message.reply("congrats is working")
     #



# –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†

@dp.message_handler(commands= 'go')
async def start_handler(message: types.Message):
    ids = [964783056, 720761725, 875674769, 608973271]
    global AUTHORIZATION_STATE
    if message.from_user.id not in ids:
        AUTHORIZATION_STATE = False
        await message.answer('–û—à–∏–±—Å—è –∞–¥—Ä–µ—Å–æ–º, –¥—Ä—É–∂–æ–∫')
    else:
        AUTHORIZATION_STATE = True
        await message.answer("–ü—Ä–∏–≤–µ—Ç, —á–µ–º –∑–∞–π–º—ë–º—Å—è? :)")


# –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†
@dp.message_handler(commands="start")  # –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def MENU(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if AUTHORIZATION_STATE == False:
        await message.answer("\t –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ–±—ã, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"
                             " \n /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \n /help - üõ† –ø–æ–º–æ—â—å \n /faq - ‚Åâ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n"
                             " /educationmaterial - üìöÔ∏è —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª \n"
                             " /testcheck - üß© —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n", reply_markup=nav.mainMenu)
    elif AUTHORIZATION_STATE == True:
        await message.answer("\t –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ–±—ã, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"
                             " \n /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \n /help - üõ† –ø–æ–º–æ—â—å \n /faq - ‚Åâ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n"
                             " /remindlesson - üîî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏ \n /reminddeadline - üîî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ \n "
                             "/educationresult - üéì —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å\n"
                             " /educationmaterial - üìöÔ∏è —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª \n"
                             " /testcheck - üß© —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
                             " /congratsstudent -  üèÜ —Ç–æ–ø —É—á–∞—â–∏—Ö—Å—è\n", reply_markup=nav.mainMenu)

@dp.message_handler(commands="help")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏
async def HELP(message: types.Message):
    if AUTHORIZATION_STATE == False: #—Å—Ç—É–¥–µ–Ω—Ç
        await shelpOut(message)
    elif AUTHORIZATION_STATE == True: #–ø—Ä–µ–ø–æ–¥
        await helpOut(message)

@dp.message_handler(commands="remindlesson")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏
async def REMINDLES(message: types.Message):
    if AUTHORIZATION_STATE == False:  # —Å—Ç—É–¥–µ–Ω—Ç
        await message.answer('–û—à–∏–±—Å—è –∞–¥—Ä–µ—Å–æ–º, –¥—Ä—É–∂–æ–∫')
    elif AUTHORIZATION_STATE == True:  # –ø—Ä–µ–ø–æ–¥
        await message.reply("remind lesson is working")

@dp.message_handler(commands="reminddeadline")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ
async def REMINDED(message: types.Message):
    if AUTHORIZATION_STATE == False:  # —Å—Ç—É–¥–µ–Ω—Ç
        await message.answer('–û—à–∏–±—Å—è –∞–¥—Ä–µ—Å–æ–º, –¥—Ä—É–∂–æ–∫')
    elif AUTHORIZATION_STATE == True: # –ø—Ä–µ–ø–æ–¥
        await remdeadOut(message)

@dp.message_handler(commands="testcheck")  # —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
async def TESTCHECK(message: types.Message):
    if AUTHORIZATION_STATE == False:  # —Å—Ç—É–¥–µ–Ω—Ç
        await stestcheckOut(message)
    elif AUTHORIZATION_STATE == True:  # –ø—Ä–µ–ø–æ–¥
        await testcheckOut(message)

@dp.message_handler(commands="educationresult")  # –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
async def EDRESUL(message: types.Message):
    if AUTHORIZATION_STATE == False:  # —Å—Ç—É–¥–µ–Ω—Ç
        await message.answer('–û—à–∏–±—Å—è –∞–¥—Ä–µ—Å–æ–º, –¥—Ä—É–∂–æ–∫')
    elif AUTHORIZATION_STATE == True:  # –ø—Ä–µ–ø–æ–¥
        await eduresOut(message)

@dp.message_handler(commands="educationmaterial")  # —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
async def EDMAT(message: types.Message):
    if AUTHORIZATION_STATE == False:  # —Å—Ç—É–¥–µ–Ω—Ç
        await sedumatOut(message)
    elif AUTHORIZATION_STATE == True:  # –ø—Ä–µ–ø–æ–¥
        await edumatOut(message)

@dp.message_handler(commands="congratsstudent")  # –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç—ã —Ö–∞—Ä–æ—à
async def CONGRATS(message: types.Message):
    if AUTHORIZATION_STATE == False:  # —Å—Ç—É–¥–µ–Ω—Ç
        await message.answer('–û—à–∏–±—Å—è –∞–¥—Ä–µ—Å–æ–º, –¥—Ä—É–∂–æ–∫')
    elif AUTHORIZATION_STATE == True:  # –ø—Ä–µ–ø–æ–¥
        await congstuOut(message)

# –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
@dp.message_handler()
async def SCRIPT(message: types.Message):
    if str(message.text[
           :10]).lower() == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        # –∫–æ–¥ –ü–æ–ª–∏–Ω—ã
        '''inp = message.text.split(' ')
        if 'txt' in inp or '—Ç—Ö—Ç' in inp:
            tg_analytic.analysis(inp, message.chat.id)
            with open('%s.txt' % message.chat.id, 'r', encoding='UTF-8') as file:
                await message.answer_document(file)
                tg_analytic.remove(message.chat.id)
        else:
            messages = tg_analytic.analysis(inp, message.chat.id)
            await message.answer(message.chat.id, messages)'''

    elif "/" not in str(message.text):
        if text_has_emoji(str(message.text)) is False:
            await chat(message)  # –ö–æ–¥ –î–∞–≤–∏–¥–∞
        elif AUTHORIZATION_STATE == True:
            await BUTTON(message)  # –ö–Ω–æ–ø–∫–∏ –ê–Ω–≥–µ–ª–∏–Ω—ã
        elif AUTHORIZATION_STATE == False:
            await StudBUTTON(message)  # –ö–Ω–æ–ø–∫–∏ –ê–Ω–≥–µ–ª–∏–Ω—ã

# –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)