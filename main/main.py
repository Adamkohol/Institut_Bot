import logging
import asyncio

import emoji
from aiogram.utils.exceptions import BotBlocked
from aiogram import Bot, executor, types
from aiogram.dispatcher import Dispatcher
from os import getenv
from sys import exit
import json
import nltk
import numpy
import random
import bot as nav
import tensorflow
import tflearn
import pickle
import tg_analytic
from nltk.stem.lancaster import LancasterStemmer

nltk.download('punkt')
stemmer = LancasterStemmer()

with open('intents.json', encoding='utf-8') as file:
    data = json.load(file)

try:
    with open("data.pickle", "rb") as f:
        words, labels, training, output = pickle.load(f)
except:
    words = []
    labels = []
    docs_x = []
    docs_y = []

    for intent in data["intents"]:
        for pattern in intent["patterns"]:
            wrds = nltk.word_tokenize(pattern)
            words.extend(wrds)
            docs_x.append(wrds)
            docs_y.append(intent["tag"])

        if intent["tag"] not in labels:
            labels.append(intent["tag"])

    words = [stemmer.stem(w.lower()) for w in words if w != "?"]
    words = sorted(list(set(words)))

    labels = sorted(labels)

    training = []
    output = []

    out_empty = [0 for _ in range(len(labels))]

    for x, doc in enumerate(docs_x):
        bag = []

        wrds = [stemmer.stem(w.lower()) for w in doc]

        for w in words:
            if w in wrds:
                bag.append(1)
            else:
                bag.append(0)

        output_row = out_empty[:]
        output_row[labels.index(docs_y[x])] = 1

        training.append(bag)
        output.append(output_row)

    training = numpy.array(training)
    output = numpy.array(output)

    with open("data.pickle", "wb") as f:
        pickle.dump((words, labels, training, output), f)

tensorflow.compat.v1.reset_default_graph()

net = tflearn.input_data(shape=[None, len(training[0])])
net = tflearn.fully_connected(net, 8)
net = tflearn.fully_connected(net, 8)
net = tflearn.fully_connected(net, len(output[0]), activation="softmax")
net = tflearn.regression(net)

model = tflearn.DNN(net)

model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)
model.save("model.tflearn")

try:
    model.load("model.tflearn")
except:
    model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)
    model.save("model.tflearn")


def bag_of_words(s, words):
    bag = [0 for _ in range(len(words))]

    s_words = nltk.word_tokenize(s)
    s_words = [stemmer.stem(word.lower()) for word in s_words]

    for se in s_words:
        for i, w in enumerate(words):
            if w == se:
                bag[i] = 1

    return numpy.array(bag)


bot_token = getenv("BOT_TOKEN")
if not bot_token:
    exit("Error: no token provided")

bot = Bot(token=bot_token)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

print("PROGRAM START")
# –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–∫–∏


# EXCEPTION FOR BLOCK---------------------------------------------------------------------------------------------------
@dp.message_handler(commands="block")
async def cmd_block(message: types.Message):
    await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")



@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True
# EXCEPTION FOR BLOCK---------------------------------------------------------------------------------------------------



# USLOVIE-----------------------------------------------------------------------------------------------------------
@dp.message_handler()
async def SCRIPT(message: types.Message):
    inp = str(message)

    results = model.predict([bag_of_words(inp, words)])[0]
    results_index = numpy.argmax(results)
    tag = labels[results_index]

    if message.text[:(10)] == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': # –¢–£–¢ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –í–û–û–ë–©–ï –ù–ò–ß–ï–ì–û –ö–†–û–ú–ï –°–ö–†–ò–ü–¢–ê –í–ù–ï –ï–ì–û –ò –í –ù–ï–ú –ù–ï –†–ê–ë–û–¢–ê–ï–¢
        inp = message.text.split(' ')
        if 'txt' in inp or '—Ç—Ö—Ç' in inp:
            tg_analytic.analysis(inp, message.chat.id)
            with open('%s.txt' % message.chat.id, 'r', encoding='UTF-8') as file:
                await message.answer_document(file)
                tg_analytic.remove(message.chat.id)
        else:
            messages = tg_analytic.analysis(inp, message.chat.id)
            await message.answer(message.chat.id, messages)
    else:
        if results[results_index] > 0.7:
            for tg in data["intents"]:
                if tg['tag'] == tag:
                    responses = tg['responses']

            await message.answer(random.choice(responses))
        else:
            await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

# USLOVIE---------------------------------------------------------------------------------------------------------


# MENU----------------------------------------------------------------------------------------------------------------

@dp.message_handler(commands="start")  # –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def MENU(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.answer("\t –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ–±—ã, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"
                        " \n /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \n /help - üõ† –ø–æ–º–æ—â—å \n /faq - ‚Åâ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n"
                        " /remindlesson - üîî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏ \n /reminddeadline - üîî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ \n "
                        "/educationresult - üéì —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å\n"
                        " /educationmaterial - üìöÔ∏è —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª \n"
                        " /testcheck - üß© —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
                        " /congratsstudent -  üèÜ —Ç–æ–ø —É—á–∞—â–∏—Ö—Å—è\n", reply_markup=nav.mainMenu)

# –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands="help")  #  –ø–æ–º–æ—â—å
async def HELP(message: types.Message):
    await helpOut(message)


@dp.message_handler(commands="faq")  # —Ç–∏–ø–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
async def FAQ(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await faqOut(message)


@dp.message_handler(commands="remindlesson")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏
async def REMINDLES(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await remlesOut(message)


@dp.message_handler(commands="reminddeadline")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ
async def REMINDED(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await remdeadOut(message)


@dp.message_handler(commands="testcheck")   # —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
async def TESTCHECK(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await testcheckOut(message)


@dp.message_handler(commands="educationresult")   # –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
async def EDRESUL(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await eduresOut(message)


@dp.message_handler(commands="educationmaterial")  # —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
async def EDMAT(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await edumatOut(message)


@dp.message_handler(commands="congratsstudent")  # –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç—ã —Ö–∞—Ä–æ—à
async def CONGRATS(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await congstuOut(message)


@dp.message_handler()
async def BUTTON(message: types.Message):
    if message.text == 'üõ† –ü–æ–º–æ—â—å':  #–∫–Ω–æ–ø–æ—á–∫–∏, —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ message  –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
        await helpOut(message)
    elif message.text == '‚Åâ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        await faqOut(message)
    elif message.text == 'üß© –¢–µ—Å—Ç—ã':
        await testcheckOut(message)
    elif message.text == 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏':
        await remlesOut(message)
    elif message.text == 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ':
        await remdeadOut(message)
    elif message.text == 'üéì –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å':
        await eduresOut(message)
    elif message.text == 'üìöÔ∏è –£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª':
        await edumatOut(message)
    elif message.text == 'üèÜ –¢–æ–ø':
        await congstuOut(message)
    elif message.text == '–î—Ä—É–≥–æ–µ ‚û°':
        await message.reply("–î—Ä—É–≥–æ–µ ‚û°", reply_markup=nav.otherMenu)
    elif message.text == '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.reply("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)


# —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –∏ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã
async def helpOut(message):
    await message.reply("help  is working")


async def faqOut(message):
    await message.reply("faq is working")


async def remlesOut(message):
    await message.reply("remind lesson is working")


async def remdeadOut(message):
    await message.reply("remind deadline is working")


async def testcheckOut(message):
    await message.reply("test is working:")


async def eduresOut(message):
    await message.reply("education result is working")


async def edumatOut(message):
    await message.reply("education material is working")


async def congstuOut(message):
    await message.reply("congrats is working")

# MENU-----------------------------------------------------------------------------------------------------------------


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
