import logging
import asyncio
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import emoji
from emoji import *
from aiogram.utils.exceptions import BotBlocked
from aiogram import Bot, executor, types
from aiogram.dispatcher import Dispatcher
from os import getenv
from sys import exit
import json
import nltk
import numpy
import random
from utils import BotStates

import hashlib
import bot as nav
import tensorflow
import tflearn
import pickle
import tg_analytic
from nltk.stem.lancaster import LancasterStemmer

from Responses import chat
password = getenv("PASS_TOKEN_KEY")
bot_token = getenv("BOT_TOKEN")
if not bot_token:
    exit("Error: no token provided")

bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.INFO)

print("PROGRAM START")


# –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–∫–∏
# –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù
@dp.message_handler(state=BotStates.Student,commands="start")  # –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def MENU(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.answer("\t –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ–±—ã, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"
                         " \n /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \n /help - üõ† –ø–æ–º–æ—â—å \n /faq - ‚Åâ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n"  
                         " /educationmaterial - üìöÔ∏è —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª \n"
                         " /testcheck - üß© —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n", reply_markup=nav.mainMenu)


@dp.message_handler(state=BotStates.Student,commands="help")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏
async def HELP(message: types.Message):
    await helpOut(message)

@dp.message_handler(state=BotStates.Student,commands="faq")
async def FAQ(message: types.Message):
    await faqOut(message)

@dp.message_handler(state=BotStates.Student,commands="testcheck")  # —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
async def TESTCHECK(message: types.Message):
    await testcheckOut(message)

@dp.message_handler(state=BotStates.Student,commands="educationmaterial")  # —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
async def EDMAT(message: types.Message):
    await edumatOut(message)

async def helpOut(message):
    await message.reply(" help  is working")

async def faqOut(message):
    await message.reply("faq is working")

async def testcheckOut(message):
    await message.reply("test is working:")

async def edumatOut(message):
    await message.reply("education material is working")

# –ö–Ω–æ–ø–∫–∏ --------------------------------------------------------------------------------------------------------------
async def BUTTON(message: types.Message):
    if message.text == 'üõ† –ü–æ–º–æ—â—å':  # –∫–Ω–æ–ø–æ—á–∫–∏, —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ message  –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
        await message.reply("help  is working")
    elif message.text == '‚Åâ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        await faqOut(message)
    elif message.text == 'üß© –¢–µ—Å—Ç—ã':
        await testcheckOut(message)
    elif message.text == 'üìöÔ∏è –£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª':
        await edumatOut(message)
    elif message.text == '–î—Ä—É–≥–æ–µ ‚û°':
        await message.reply("–î—Ä—É–≥–æ–µ ‚û°", reply_markup=nav.otherMenu)
    elif message.text == '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.reply("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)
# –ö–Ω–æ–ø–∫–∏ --------------------------------------------------------------------------------------------------------------


# –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢ –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù

# –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î
'''
 –¢–ï–ö–°–¢ –î–õ–Ø –ü–û–ú–û–©–ò
–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /start 
 –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–æ –Ω–∞ pomogator_bot@bk.ru
 '''
'''–ó–î–ï–°–¨ –ù–£–ñ–ù–û –ü–†–û–ü–ò–°–ê–¢–¨ –ú–ï–ù–Æ –î–õ–Ø –ö–ù–û–ü–û–ö –ê-–õ–Ø –ù–ê–ñ–ò–ú–ê–Æ –¢–ï–°–¢–´ –ò –ü–û–Ø–í–õ–Ø–ï–¢–°–Ø –£–î–ê–õ–ò–¢–¨/–î–û–ë–ê–í–ò–¢–¨ –¢–ï–°–¢ –ò –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î'''
@dp.message_handler(state=BotStates.Authorized,commands="start")  # –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def MENU(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.answer("\t –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ–±—ã, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"
                         " \n /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \n /help - üõ† –ø–æ–º–æ—â—å \n /faq - ‚Åâ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n"
                         " /remindlesson - üîî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏ \n /reminddeadline - üîî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ \n "
                         "/educationresult - üéì —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å\n"
                         " /educationmaterial - üìöÔ∏è —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª \n"
                         " /testcheck - üß© —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
                         " /congratsstudent -  üèÜ —Ç–æ–ø —É—á–∞—â–∏—Ö—Å—è\n", reply_markup=nav.mainMenu)




@dp.message_handler(state=BotStates.Authorized,commands="help")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏
async def helpOut(message):
    await message.reply(" auth help  is working")

@dp.message_handler(state=BotStates.Authorized,commands="faq")
async def FAQ(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await faqOut(message)

@dp.message_handler(state=BotStates.Authorized,commands="remindlesson")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏
async def REMINDLES(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await remlesOut(message)

@dp.message_handler(state=BotStates.Authorized,commands="reminddeadline")  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ
async def REMINDED(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await remdeadOut(message)

@dp.message_handler(state=BotStates.Authorized,commands="testcheck")  # —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
async def TESTCHECK(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await testcheckOut(message)

@dp.message_handler(state=BotStates.Authorized,commands="educationresult")  # –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
async def EDRESUL(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await eduresOut(message)

@dp.message_handler(state=BotStates.Authorized,commands="educationmaterial")  # —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
async def EDMAT(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await edumatOut(message)

@dp.message_handler(state=BotStates.Authorized,commands="congratsstudent")  # –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç—ã —Ö–∞—Ä–æ—à
async def CONGRATS(message: types.Message):  # await —Çe–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await congstuOut(message)

# Output —Ñ—É–Ω–∫—Ü–∏–∏ ------------------------------------------------------------------------------------------------------
# —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –∏ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã
async def helpOut(message):
    await message.reply("auth help  is working")

async def faqOut(message):
    await message.reply("auth faq is working")

async def remlesOut(message):
    await message.reply("auth remind lesson is working")

async def remdeadOut(message):
    await message.reply("auth remind deadline is working")

async def testcheckOut(message):
    await message.reply("auth test is working:")

async def eduresOut(message):
    await message.reply("auth education result is working")

async def edumatOut(message):
    await message.reply("auth education material is working")

async def congstuOut(message):
    await message.reply("auth congrats is working")

# Output —Ñ—É–Ω–∫—Ü–∏–∏ ------------------------------------------------------------------------------------------------------
# –ö–Ω–æ–ø–∫–∏ --------------------------------------------------------------------------------------------------------------
async def BUTTON(message: types.Message):
    if message.text == 'üõ† –ü–æ–º–æ—â—å':  # –∫–Ω–æ–ø–æ—á–∫–∏, —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ message  –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
        await message.reply("auth help  is working")
    elif message.text == '‚Åâ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        await faqOut(message)
    elif message.text == 'üß© –¢–µ—Å—Ç—ã':
        await testcheckOut(message)
    elif message.text == 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–Ω—è—Ç–∏–∏':
        await remlesOut(message)
    elif message.text == 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ':
        await remdeadOut(message)
    elif message.text == 'üéì –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å':
        await eduresOut(message)
    elif message.text == 'üìöÔ∏è –£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª':
        await edumatOut(message)
    elif message.text == 'üèÜ –¢–æ–ø':
        await congstuOut(message)
    elif message.text == '–î—Ä—É–≥–æ–µ ‚û°':
        await message.reply("–î—Ä—É–≥–æ–µ ‚û°", reply_markup=nav.otherMenu)
    elif message.text == '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.reply("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)
# –ö–Ω–æ–ø–∫–∏ --------------------------------------------------------------------------------------------------------------


# –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –°–¢–ê–¢–£–° –ü–†–ï–ü–û–î


# –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†
@dp.message_handler(state=BotStates.Student,commands="pcfat")  # –ø—Ä–æ–≤–µ—Ä–∫–∞
async def CHECKPASS(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    if message.text != "–û—Ç–º–µ–Ω–∞":
        await BotStates.waiting_for_password.set()
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        await BotStates.Student.set()


@dp.message_handler(state=BotStates.waiting_for_password)
async def check_password(message: types.Message):

    password_to_check = message.text

    if password_to_check == password:
        await message.answer("right")
        await BotStates.Authorized.set()
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        await BotStates.Student.set()
    else:
        await message.answer("wrong")
        await BotStates.waiting_for_password.set()


@dp.message_handler(state=BotStates.Authorized,commands="logout")
async def OUT(message: types.Message):  # await —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?")
    if message.text != "–ù–µ—Ç":
        await BotStates.Authorized.set()
    elif message.text == "–î–∞":
        await BotStates.Student.set()
# –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –ü–†–û–í–ï–†


# EXCEPTION FOR BLOCK---------------------------------------------------------------------------------------------------

@dp.message_handler(commands="block")
async def cmd_block(message: types.Message):
    await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")


@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True


# EXCEPTION FOR BLOCK---------------------------------------------------------------------------------------------------

'''def is_emoji(s):
    count = 0
    for em in UNICODE_EMOJI_ENGLISH:
        count += s.count(em)
        if count > 1:
            return False
        return bool(count)
'''

def text_has_emoji(text):
    for character in text:
        if character in emoji.UNICODE_EMOJI_ENGLISH:
            return True
    return False


# –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
@dp.message_handler()
async def SCRIPT(message: types.Message):

    if str(message.text[
           :10]).lower() == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        # –∫–æ–¥ –ü–æ–ª–∏–Ω—ã
        '''inp = message.text.split(' ')
        if 'txt' in inp or '—Ç—Ö—Ç' in inp:
            tg_analytic.analysis(inp, message.chat.id)
            with open('%s.txt' % message.chat.id, 'r', encoding='UTF-8') as file:
                await message.answer_document(file)
                tg_analytic.remove(message.chat.id)
        else:
            messages = tg_analytic.analysis(inp, message.chat.id)
            await message.answer(message.chat.id, messages)'''

    elif "/" in str(message.text):
        if text_has_emoji(str(message.text)) is False:
            await (message)
        else:
            await BUTTON(message) # –ö–Ω–æ–ø–∫–∏ –ê–Ω–≥–µ–ª–∏–Ω—ã
    elif "/" not in str(message.text):
        if text_has_emoji(str(message.text)) is False:
            await chat(message) # –ö–æ–¥ –î–∞–≤–∏–¥–∞
        else:
            await BUTTON(message) # –ö–Ω–æ–ø–∫–∏ –ê–Ω–≥–µ–ª–∏–Ω—ã
# –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
